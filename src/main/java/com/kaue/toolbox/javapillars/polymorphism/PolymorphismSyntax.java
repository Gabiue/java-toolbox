package com.kaue.toolbox.javapillars.polymorphism;

/**
 * üîÑ POLYMORPHISM (POLIMORFISMO) - MANUAL DE REFER√äNCIA
 *
 * Polimorfismo permite que objetos de diferentes classes sejam tratados
 * como objetos de uma classe comum (superclasse), mas mantendo seus
 * comportamentos espec√≠ficos.
 *
 * SIGNIFICADO: "Poli" = muitas, "morphism" = formas
 * UM MESMO M√âTODO pode ter MUITAS IMPLEMENTA√á√ïES diferentes
 *
 * BENEF√çCIOS:
 * ‚úÖ Flexibilidade no c√≥digo
 * ‚úÖ Facilita extensibilidade
 * ‚úÖ Reduz acoplamento
 * ‚úÖ Permite c√≥digo gen√©rico
 */
public class PolymorphismSyntax {

    // ========== 1. CLASSE PAI PARA DEMONSTRA√á√ÉO ==========

    static abstract class Forma {
        protected String nome;

        public Forma(String nome) {
            this.nome = nome;
        }

        // üîÑ M√âTODO POLIM√ìRFICO: Cada subclasse implementa diferente
        public abstract double calcularArea();

        // üìã M√âTODO COMUM: Todas herdam igual
        public void mostrarInfo() {
            System.out.println("Forma: " + nome + " | √Årea: " + calcularArea());
        }

        // üîÑ M√âTODO SOBRESCRIT√çVEL: Pode ser personalizado
        public void desenhar() {
            System.out.println("Desenhando uma forma gen√©rica: " + nome);
        }
    }

    // ========== 2. SUBCLASSES COM COMPORTAMENTOS ESPEC√çFICOS ==========

    static class Circulo extends Forma {
        private double raio;

        public Circulo(double raio) {
            super("C√≠rculo");
            this.raio = raio;
        }

        // üîÑ IMPLEMENTA√á√ÉO ESPEC√çFICA: Como c√≠rculo calcula √°rea
        @Override
        public double calcularArea() {
            return Math.PI * raio * raio;
        }

        // üîÑ COMPORTAMENTO ESPEC√çFICO: Como c√≠rculo desenha
        @Override
        public void desenhar() {
            System.out.println("üîµ Desenhando c√≠rculo com raio " + raio);
        }

        // ‚≠ê M√âTODO ESPEC√çFICO: S√≥ c√≠rculo tem
        public void mostrarRaio() {
            System.out.println("Raio do c√≠rculo: " + raio);
        }
    }

    static class Retangulo extends Forma {
        private double largura, altura;

        public Retangulo(double largura, double altura) {
            super("Ret√¢ngulo");
            this.largura = largura;
            this.altura = altura;
        }

        // üîÑ IMPLEMENTA√á√ÉO ESPEC√çFICA: Como ret√¢ngulo calcula √°rea
        @Override
        public double calcularArea() {
            return largura * altura;
        }

        // üîÑ COMPORTAMENTO ESPEC√çFICO: Como ret√¢ngulo desenha
        @Override
        public void desenhar() {
            System.out.println("üî≤ Desenhando ret√¢ngulo " + largura + "x" + altura);
        }

        // ‚≠ê M√âTODO ESPEC√çFICO: S√≥ ret√¢ngulo tem
        public void mostrarDimensoes() {
            System.out.println("Dimens√µes: " + largura + " x " + altura);
        }
    }

    static class Triangulo extends Forma {
        private double base, altura;

        public Triangulo(double base, double altura) {
            super("Tri√¢ngulo");
            this.base = base;
            this.altura = altura;
        }

        // üîÑ IMPLEMENTA√á√ÉO ESPEC√çFICA: Como tri√¢ngulo calcula √°rea
        @Override
        public double calcularArea() {
            return (base * altura) / 2;
        }

        // üîÑ COMPORTAMENTO ESPEC√çFICO: Como tri√¢ngulo desenha
        @Override
        public void desenhar() {
            System.out.println("üî∫ Desenhando tri√¢ngulo base:" + base + " altura:" + altura);
        }

        // ‚≠ê M√âTODO ESPEC√çFICO: S√≥ tri√¢ngulo tem
        public void mostrarLados() {
            System.out.println("Base: " + base + ", Altura: " + altura);
        }
    }

    // ========== 3. DEMONSTRA√á√ÉO DE POLIMORFISMO ==========

    public static void demonstrarPolimorfismoBasico() {
        System.out.println("=== POLIMORFISMO B√ÅSICO ===\n");

        // üîë CHAVE DO POLIMORFISMO: Refer√™ncia da superclasse ‚Üí objeto da subclasse
        Forma forma1 = new Circulo(5);        // ‚úÖ C√≠rculo √â UMA Forma
        Forma forma2 = new Retangulo(4, 6);   // ‚úÖ Ret√¢ngulo √â UMA Forma
        Forma forma3 = new Triangulo(3, 8);   // ‚úÖ Tri√¢ngulo √â UMA Forma

        // üîÑ POLIMORFISMO EM A√á√ÉO: Mesmo m√©todo, comportamentos diferentes
        System.out.println("--- CHAMADAS POLIM√ìRFICAS ---");
        forma1.mostrarInfo();  // Chama vers√£o do C√≠rculo
        forma2.mostrarInfo();  // Chama vers√£o do Ret√¢ngulo
        forma3.mostrarInfo();  // Chama vers√£o do Tri√¢ngulo

        System.out.println("\n--- DESENHOS POLIM√ìRFICOS ---");
        forma1.desenhar();     // Desenho espec√≠fico do C√≠rculo
        forma2.desenhar();     // Desenho espec√≠fico do Ret√¢ngulo
        forma3.desenhar();     // Desenho espec√≠fico do Tri√¢ngulo
    }

    public static void demonstrarArrayPolimorfico() {
        System.out.println("\n=== ARRAY POLIM√ìRFICO ===\n");

        // üîÑ PODER DO POLIMORFISMO: Array de diferentes tipos tratados igual
        Forma[] formas = {
                new Circulo(3),
                new Retangulo(5, 2),
                new Triangulo(4, 6),
                new Circulo(7),
                new Retangulo(3, 3)
        };

        System.out.println("Processando " + formas.length + " formas diferentes:");

        // üîÑ LOOP POLIM√ìRFICO: Cada forma se comporta do seu jeito
        for (Forma forma : formas) {
            forma.desenhar();      // M√©todo polim√≥rfico: cada um desenha diferente
            forma.mostrarInfo();   // Cada um calcula √°rea do seu jeito
            System.out.println("---");
        }

        // üìä EXEMPLO: Somar √°reas de formas diferentes
        double areaTotal = 0;
        for (Forma forma : formas) {
            areaTotal += forma.calcularArea(); // Polimorfismo: cada um calcula diferente
        }
        System.out.println("√Årea total de todas as formas: " + String.format("%.2f", areaTotal));
    }

    // ========== 4. INSTANCEOF E CASTING ==========

    public static void demonstrarInstanceofCasting() {
        System.out.println("\n=== INSTANCEOF E CASTING ===\n");

        Forma[] formas = {
                new Circulo(4),
                new Retangulo(3, 5),
                new Triangulo(2, 7)
        };

        for (Forma forma : formas) {
            // üîç INSTANCEOF: Verifica o tipo real do objeto
            System.out.println("Processando: " + forma.nome);

            if (forma instanceof Circulo) {
                // ‚¨áÔ∏è CASTING: Converte refer√™ncia para acessar m√©todos espec√≠ficos
                Circulo circulo = (Circulo) forma;
                circulo.mostrarRaio();  // M√©todo espec√≠fico do C√≠rculo

            } else if (forma instanceof Retangulo) {
                Retangulo retangulo = (Retangulo) forma;
                retangulo.mostrarDimensoes();  // M√©todo espec√≠fico do Ret√¢ngulo

            } else if (forma instanceof Triangulo) {
                Triangulo triangulo = (Triangulo) forma;
                triangulo.mostrarLados();  // M√©todo espec√≠fico do Tri√¢ngulo
            }
            System.out.println();
        }
    }

    // ========== 5. POLIMORFISMO COM M√âTODOS ==========

    // üîÑ M√âTODO POLIM√ìRFICO: Aceita qualquer Forma
    public static void processarForma(Forma forma) {
        System.out.println("üìã Processando forma recebida:");
        forma.desenhar();       // Comportamento espec√≠fico da forma
        forma.mostrarInfo();    // Informa√ß√µes espec√≠ficas da forma

        // Tratamento espec√≠fico se necess√°rio
        if (forma instanceof Circulo) {
            System.out.println("üîµ √â um c√≠rculo!");
        } else if (forma instanceof Retangulo) {
            System.out.println("üî≤ √â um ret√¢ngulo!");
        } else if (forma instanceof Triangulo) {
            System.out.println("üî∫ √â um tri√¢ngulo!");
        }
    }

    // üîÑ M√âTODO QUE DEMONSTRA FLEXIBILIDADE
    public static double calcularAreaTotal(Forma... formas) {
        double total = 0;
        System.out.println("Calculando √°rea total de " + formas.length + " formas:");

        for (Forma forma : formas) {
            double area = forma.calcularArea(); // Polimorfismo!
            System.out.println("- " + forma.nome + ": " + String.format("%.2f", area));
            total += area;
        }

        return total;
    }

    // ========== 6. REGRAS E CONCEITOS IMPORTANTES ==========

    /**
     * üìã REGRAS DO POLIMORFISMO:
     *
     * ‚úÖ Refer√™ncia da superclasse pode apontar para objeto da subclasse
     * ‚úÖ M√©todo chamado √© determinado em TEMPO DE EXECU√á√ÉO (late binding)
     * ‚úÖ Sobrescrita (@Override) √© essencial para polimorfismo
     * ‚úÖ instanceof verifica o tipo real do objeto
     * ‚úÖ Casting permite acessar m√©todos espec√≠ficos da subclasse
     *
     * ‚ùå Refer√™ncia da subclasse N√ÉO pode apontar para objeto da superclasse
     * ‚ùå M√©todos espec√≠ficos da subclasse n√£o s√£o acess√≠veis via refer√™ncia da superclasse
     *
     * üîë TIPOS DE POLIMORFISMO:
     * - Polimorfismo de m√©todo (method overriding)
     * - Polimorfismo de tipo (superclass reference)
     * - Polimorfismo param√©trico (generics - veremos depois)
     *
     * üí° VANTAGENS:
     * - C√≥digo mais flex√≠vel e extens√≠vel
     * - Facilita adi√ß√£o de novos tipos
     * - Reduz duplica√ß√£o de c√≥digo
     * - Permite programa√ß√£o gen√©rica
     */

    // ========== MAIN: DEMONSTRA√á√ÉO COMPLETA ==========

    public static void main(String[] args) {
        System.out.println("üîÑ POLYMORPHISM (POLIMORFISMO) - MANUAL DE REFER√äNCIA\n");

        // Demonstra√ß√µes passo a passo
        demonstrarPolimorfismoBasico();
        demonstrarArrayPolimorfico();
        demonstrarInstanceofCasting();

        System.out.println("=== POLIMORFISMO COM M√âTODOS ===\n");

        // Testando m√©todo polim√≥rfico
        processarForma(new Circulo(6));
        System.out.println();
        processarForma(new Retangulo(4, 8));
        System.out.println();

        // Calculando √°rea total de formas diferentes
        System.out.println("=== C√ÅLCULO POLIM√ìRFICO ===");
        double areaTotal = calcularAreaTotal(
                new Circulo(3),
                new Retangulo(4, 5),
                new Triangulo(6, 4),
                new Circulo(2)
        );
        System.out.println("üî¢ √Årea total: " + String.format("%.2f", areaTotal));

        System.out.println("\n=== CONCEITOS FUNDAMENTAIS ===");
        System.out.println("üîë Uma refer√™ncia, m√∫ltiplos comportamentos");
        System.out.println("üîÑ Mesmo m√©todo, implementa√ß√µes diferentes");
        System.out.println("‚è∞ Decis√£o do m√©todo em tempo de execu√ß√£o");
        System.out.println("üéØ instanceof + casting para acesso espec√≠fico");
        System.out.println("üì¶ Arrays/Collections podem misturar tipos diferentes");
        System.out.println("üöÄ Base para programa√ß√£o flex√≠vel e extens√≠vel");

        System.out.println("\n=== SINTAXE CHAVE ===");
        System.out.println("Superclasse ref = new Subclasse();  // ‚úÖ Polimorfismo");
        System.out.println("ref.metodo();                        // Chama vers√£o da subclasse");
        System.out.println("if (ref instanceof Subclasse) { ... } // Verificar tipo");
        System.out.println("Subclasse obj = (Subclasse) ref;     // Casting para acesso espec√≠fico");
    }
}
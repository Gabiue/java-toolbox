
package javapillars.encapsulation;

import java.time.LocalDate;

public class UserExample {
    // üîí ENCAPSULAMENTO: Todos os atributos s√£o PRIVADOS
    // Diferentes tipos de acesso demonstram flexibilidade do encapsulamento
    private String nome;           // Mut√°vel: tem getter + setter
    private String email;          // Mut√°vel: tem getter + setter
    private String password;       // üîê SEGURAN√áA: s√≥ setter, nunca getter!
    private final String cpf;      // üîí IMUT√ÅVEL: final = n√£o pode ser alterado
    private boolean isAtiva;       // Mut√°vel: tem getter + setter
    private final LocalDate dataCriacao; // üîí IMUT√ÅVEL: final + valor autom√°tico

    // üèóÔ∏è CONSTRUTOR: Recebe dados essenciais, define valores autom√°ticos
    public UserExample(String nome, String email, String password, String cpf) {
        this.nome = nome;
        this.email = email;
        this.password = password;
        this.cpf = cpf;

        // Valores definidos automaticamente (n√£o v√™m do usu√°rio)
        this.isAtiva = true;              // Todo usu√°rio come√ßa ativo
        this.dataCriacao = LocalDate.now(); // Data atual automaticamente
    }

    // üìñ GETTERS: M√©todos para LER dados privados
    public String getNome() {
        return nome;
    }

    public String getEmail() {
        return email;
    }

    public String getCpf() {
        return cpf; // CPF √© final - s√≥ leitura ap√≥s cria√ß√£o
    }

    public boolean isAtiva() {
        return isAtiva;
    }

    public LocalDate getDataCriacao() {
        return dataCriacao; // Data cria√ß√£o √© final - s√≥ leitura
    }

    // ‚ö†Ô∏è IMPORTANTE: N√£o h√° getPassword() por quest√£o de SEGURAN√áA!
    // A senha nunca deve ser exposta, apenas alterada

    // ‚úèÔ∏è SETTERS: M√©todos para ALTERAR dados privados (quando permitido)
    public void setNome(String nome) {
        this.nome = nome;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setPassword(String password) {
        this.password = password; // Pode alterar senha, mas nunca ler
    }

    public void setAtiva(boolean ativa) {
        isAtiva = ativa;
    }

    // ‚ö†Ô∏è IMPORTANTE: N√£o h√° setCpf() nem setDataCriacao()
    // pois s√£o campos FINAL (imut√°veis)

    // üîê M√âTODO DE AUTENTICA√á√ÉO: Usa password sem exp√¥-la
    public boolean autenticar(String senhaDigitada) {
        return this.password.equals(senhaDigitada);
    }

    // üìÑ toString(): Exibe informa√ß√µes SEM mostrar a senha
    @Override
    public String toString() {
        return "UserExample{" +
                "nome='" + nome + '\'' +
                ", email='" + email + '\'' +
                ", password='[PROTEGIDA]'" +  // Nunca mostra senha real
                ", cpf='" + cpf + '\'' +
                ", isAtiva=" + isAtiva +
                ", dataCriacao=" + dataCriacao +
                '}';
    }

    public static void main(String[] args) {
        System.out.println("=== DEMONSTRA√á√ÉO DE ENCAPSULAMENTO AVAN√áADO ===\n");

        // ‚úÖ CRIANDO USU√ÅRIO: Usando construtor p√∫blico
        UserExample user = new UserExample("Kaue", "kaue@teste.com", "senha123", "123.456.789-00");
        System.out.println("Usu√°rio criado: " + user);

        System.out.println("\n--- ACESSANDO DADOS COM GETTERS ---");
        // ‚úÖ LENDO DADOS: Usando getters (quando dispon√≠veis)
        System.out.println("Nome: " + user.getNome());
        System.out.println("Email: " + user.getEmail());
        System.out.println("CPF: " + user.getCpf());
        System.out.println("Ativo: " + user.isAtiva());
        System.out.println("Data de cria√ß√£o: " + user.getDataCriacao());

        System.out.println("\n--- TENTANDO ACESSAR SENHA ---");
        System.out.println("‚ùå user.getPassword() - M√âTODO N√ÉO EXISTE! (Seguran√ßa)");
        System.out.println("‚úÖ Autentica√ß√£o: " + user.autenticar("senha123")); // true
        System.out.println("‚úÖ Senha errada: " + user.autenticar("123456"));   // false

        System.out.println("\n--- MODIFICANDO DADOS COM SETTERS ---");
        // ‚úÖ ALTERANDO DADOS: Usando setters (quando permitidos)
        user.setNome("Kaue Silva");
        user.setEmail("kaue.silva@teste.com");
        user.setPassword("novaSenha456");
        user.setAtiva(false);

        System.out.println("Nome atualizado: " + user.getNome());
        System.out.println("Email atualizado: " + user.getEmail());
        System.out.println("Status atualizado: " + (user.isAtiva() ? "Ativo" : "Inativo"));
        System.out.println("Nova senha funciona: " + user.autenticar("novaSenha456"));

        System.out.println("\n--- O QUE O ENCAPSULAMENTO IMPEDE ---");
        System.out.println("‚ùå As linhas abaixo N√ÉO COMPILAM:");
        System.out.println("// user.nome = \"Jo√£o\";           // ERRO! Campo privado");
        System.out.println("// user.password = \"123\";       // ERRO! Campo privado");
        System.out.println("// user.cpf = \"999.999.999-99\"; // ERRO! Campo final");
        System.out.println("// user.dataCriacao = LocalDate.now(); // ERRO! Campo final");
        System.out.println("// String senha = user.getPassword(); // ERRO! M√©todo n√£o existe");

        System.out.println("\n--- TIPOS DE ENCAPSULAMENTO DEMONSTRADOS ---");
        System.out.println("üîì MUT√ÅVEL: nome, email, isAtiva (getter + setter)");
        System.out.println("üîí IMUT√ÅVEL: cpf, dataCriacao (s√≥ getter, campos final)");
        System.out.println("üîê PROTEGIDO: password (s√≥ setter, sem getter por seguran√ßa)");
        System.out.println("‚ö° AUTOM√ÅTICO: isAtiva, dataCriacao (valores definidos automaticamente)");

        System.out.println("\nUsu√°rio final: " + user);
    }
}
package com.kaue.toolbox.javapillars.encapsulation;

/**
 * üìã MANUAL COMPLETO: SINTAXE E ANATOMIA DO ENCAPSULAMENTO
 *
 * Este arquivo √© seu DICION√ÅRIO DE REFER√äNCIA para encapsulamento!
 * Aqui voc√™ encontra:
 * - Onde usar cada modificador de acesso
 * - Como criar getters e setters corretamente
 * - Conven√ß√µes de nomenclatura
 * - Padr√µes e anti-padr√µes
 * - Sintaxe completa comentada linha por linha
 *
 * üéØ OBJETIVO: Entender CADA decis√£o de design antes dos exemplos pr√°ticos
 */
public class EncapsulationSyntax {

    // ========================================
    // üîí MODIFICADORES DE ACESSO - QUANDO USAR?
    // ========================================

    /**
     * üî¥ PRIVATE - "S√≥ EU posso acessar"
     *
     * QUANDO USAR:
     * - Dados sens√≠veis (senha, saldo, etc.)
     * - Implementa√ß√£o interna da classe
     * - Atributos que precisam de valida√ß√£o
     * - Estados que n√£o devem ser alterados diretamente
     */
    private String dadoSensivel;        // ‚Üê Ningu√©m de fora pode acessar
    private int contadorInterno;        // ‚Üê L√≥gica interna da classe
    private boolean statusValidado;     // ‚Üê S√≥ a classe controla esse estado

    /**
     * üü° PROTECTED - "Eu e meus filhos podem acessar"
     *
     * QUANDO USAR:
     * - Atributos que classes filhas precisam acessar
     * - M√©todos utilit√°rios para heran√ßa
     * - Dados compartilhados em hierarquia de classes
     */
    protected String configuracaoBase;  // ‚Üê Classes filhas podem usar
    protected int limiteOperacao;       // ‚Üê Herdeiros podem modificar

    /**
     * üü¢ PUBLIC - "Todo mundo pode acessar"
     *
     * QUANDO USAR:
     * - Constantes universais
     * - M√©todos da interface p√∫blica da classe
     * - Dados que realmente podem ser p√∫blicos
     *
     * ‚ö†Ô∏è CUIDADO: Use com parcim√¥nia! Quebra encapsulamento!
     */
    public static final String VERSAO = "1.0";    // ‚Üê Constante p√∫blica OK
    // public int saldo;  ‚Üê ‚ùå NUNCA! Saldo deve ser privado!

    /**
     * üì¶ PACKAGE-PRIVATE (sem modificador) - "S√≥ classes do mesmo package"
     *
     * QUANDO USAR:
     * - Classes auxiliares do mesmo m√≥dulo
     * - Dados compartilhados dentro do package
     * - Testes no mesmo package
     */
    String dadoInterno;                 // ‚Üê S√≥ classes do mesmo package

    // ========================================
    // üèóÔ∏è CONSTRUTORES - INICIALIZA√á√ÉO SEGURA
    // ========================================

    /**
     * üéØ CONSTRUTOR: Primeiro momento para garantir estado v√°lido!
     *
     * RESPONSABILIDADES:
     * 1. Inicializar atributos obrigat√≥rios
     * 2. Validar par√¢metros recebidos
     * 3. Garantir que objeto nas√ßa em estado consistente
     * 4. Configurar valores padr√£o seguros
     */
    public EncapsulationSyntax(String dadoObrigatorio, int valorInicial) {
        // ‚úÖ SEMPRE validar par√¢metros no construtor
        if (dadoObrigatorio == null || dadoObrigatorio.trim().isEmpty()) {
            throw new IllegalArgumentException("Dado obrigat√≥rio n√£o pode ser nulo ou vazio");
        }
        if (valorInicial < 0) {
            throw new IllegalArgumentException("Valor inicial deve ser positivo");
        }

        // ‚úÖ Inicializar atributos de forma segura
        this.dadoSensivel = dadoObrigatorio;
        this.contadorInterno = valorInicial;
        this.statusValidado = false;        // Estado inicial seguro
        this.configuracaoBase = "PADRAO";   // Valor padr√£o sensato
        this.limiteOperacao = 1000;         // Limite seguro inicial
        this.dadoInterno = "INICIALIZADO";  // Estado conhecido
    }

    // ========================================
    // üìñ M√âTODOS GETTERS - "LEITURA CONTROLADA"
    // ========================================

    /**
     * üîç PADR√ÉO GETTER: get + NomeAtributo (com primeira letra mai√∫scula)
     *
     * RESPONSABILIDADES:
     * 1. Fornecer acesso SEGURO aos dados privados
     * 2. Aplicar formata√ß√µes se necess√°rio
     * 3. Fazer valida√ß√µes de estado se necess√°rio
     * 4. Retornar c√≥pias defensivas para objetos mut√°veis
     *
     * üìù NOMENCLATURA:
     * - Atributo: dadoSensivel ‚Üí Getter: getDadoSensivel()
     * - Atributo: statusValidado ‚Üí Getter: isStatusValidado() (para boolean)
     */

    // ‚úÖ GETTER SIMPLES - para dados imut√°veis/primitivos
    public String getDadoSensivel() {
        // ‚ö†Ô∏è Pode aplicar valida√ß√µes de estado
        if (!statusValidado) {
            return "DADOS_NAO_VALIDADOS";
        }
        return dadoSensivel;  // Retorna diretamente (String √© imut√°vel)
    }

    // ‚úÖ GETTER PARA BOOLEAN - usa "is" ao inv√©s de "get"
    public boolean isStatusValidado() {
        return statusValidado;
    }

    // ‚úÖ GETTER COM FORMATA√á√ÉO - pode processar antes de retornar
    public String getDadoSensivelFormatado() {
        return dadoSensivel != null ? dadoSensivel.toUpperCase() : "N/A";
    }

    // ‚úÖ GETTER CALCULADO - n√£o precisa ter atributo correspondente
    public String getResumoStatus() {
        return String.format("Contador: %d, Validado: %s",
                contadorInterno, statusValidado ? "SIM" : "N√ÉO");
    }

    // ========================================
    // ‚úèÔ∏è M√âTODOS SETTERS - "ESCRITA CONTROLADA"
    // ========================================

    /**
     * üîß PADR√ÉO SETTER: set + NomeAtributo (com primeira letra mai√∫scula)
     *
     * RESPONSABILIDADES:
     * 1. VALIDAR todos os par√¢metros recebidos
     * 2. Manter estado consistente do objeto
     * 3. Aplicar regras de neg√≥cio
     * 4. Lan√ßar exce√ß√µes para valores inv√°lidos
     * 5. Atualizar estados dependentes se necess√°rio
     *
     * üìù NOMENCLATURA:
     * - Atributo: dadoSensivel ‚Üí Setter: setDadoSensivel(String valor)
     */

    // ‚úÖ SETTER COM VALIDA√á√ÉO COMPLETA
    public void setDadoSensivel(String novoDado) {
        // üõ°Ô∏è VALIDA√á√ÉO 1: Null/vazio
        if (novoDado == null || novoDado.trim().isEmpty()) {
            throw new IllegalArgumentException("Dado sens√≠vel n√£o pode ser nulo ou vazio");
        }

        // üõ°Ô∏è VALIDA√á√ÉO 2: Tamanho/formato
        if (novoDado.length() < 3) {
            throw new IllegalArgumentException("Dado sens√≠vel deve ter pelo menos 3 caracteres");
        }

        // üõ°Ô∏è VALIDA√á√ÉO 3: Caracteres v√°lidos
        if (!novoDado.matches("[A-Za-z0-9]+")) {
            throw new IllegalArgumentException("Dado sens√≠vel deve conter apenas letras e n√∫meros");
        }

        // ‚úÖ ATUALIZA√á√ÉO SEGURA
        this.dadoSensivel = novoDado.trim().toUpperCase();

        // ‚úÖ ATUALIZAR ESTADOS DEPENDENTES
        this.statusValidado = true;  // Marca como validado ap√≥s altera√ß√£o
    }

    // ‚úÖ SETTER CONDICIONAL - s√≥ altera se estado permitir
    public void setContadorInterno(int novoValor) {
        // üõ°Ô∏è VALIDA√á√ÉO DE ESTADO
        if (!statusValidado) {
            throw new IllegalStateException("N√£o √© poss√≠vel alterar contador antes da valida√ß√£o");
        }

        // üõ°Ô∏è VALIDA√á√ÉO DE VALOR
        if (novoValor < 0) {
            throw new IllegalArgumentException("Contador n√£o pode ser negativo");
        }

        if (novoValor > limiteOperacao) {
            throw new IllegalArgumentException("Valor excede limite de opera√ß√£o: " + limiteOperacao);
        }

        this.contadorInterno = novoValor;
    }

    // ‚ùå ANTI-PADR√ÉO: SETTER SEM VALIDA√á√ÉO
    /*
    public void setContadorInternoMalFeito(int valor) {
        this.contadorInterno = valor;  // ‚ùå Aceita qualquer valor!
    }
    */

    // ========================================
    // üö´ QUANDO N√ÉO CRIAR GETTERS/SETTERS
    // ========================================

    /**
     * üîí ATRIBUTOS SEM SETTER - "Read-Only ap√≥s inicializa√ß√£o"
     *
     * CASOS:
     * - IDs √∫nicos
     * - Timestamps de cria√ß√£o
     * - Configura√ß√µes que n√£o devem mudar
     * - Estados calculados
     */
    private final String id = java.util.UUID.randomUUID().toString();
    private final long timestampCriacao = System.currentTimeMillis();

    // ‚úÖ S√≥ getter, sem setter - dados imut√°veis ap√≥s cria√ß√£o
    public String getId() {
        return id;
    }

    public long getTimestampCriacao() {
        return timestampCriacao;
    }

    // ‚ùå N√ÉO criar setters para estes atributos!
    // public void setId(String id) { ... }  ‚Üê NUNCA!

    /**
     * üîê ATRIBUTOS SEM GETTER - "Write-Only" ou internos
     *
     * CASOS:
     * - Senhas/tokens
     * - Estados internos tempor√°rios
     * - Contadores de controle
     */
    private String senhaHash;  // Nunca expor diretamente

    // ‚úÖ Setter para senha (com hash)
    public void setSenha(String senhaPlana) {
        if (senhaPlana == null || senhaPlana.length() < 8) {
            throw new IllegalArgumentException("Senha deve ter pelo menos 8 caracteres");
        }
        // Simula√ß√£o de hash (em produ√ß√£o use BCrypt, etc.)
        this.senhaHash = "HASH_" + senhaPlana.hashCode();
    }

    // ‚úÖ M√©todo para verificar senha (sem expor o hash)
    public boolean verificarSenha(String senhaPlana) {
        if (senhaPlana == null) return false;
        String hashTentativa = "HASH_" + senhaPlana.hashCode();
        return hashTentativa.equals(this.senhaHash);
    }

    // ‚ùå NUNCA criar getter para senha/hash!
    // public String getSenhaHash() { return senhaHash; }  ‚Üê NUNCA!

    // ========================================
    // üõ†Ô∏è M√âTODOS UTILIT√ÅRIOS E VALIDA√á√ÉO
    // ========================================

    /**
     * üîß M√âTODOS DE NEG√ìCIO - Opera√ß√µes controladas nos dados
     */
    public void incrementarContador() {
        if (contadorInterno < limiteOperacao) {
            contadorInterno++;
        } else {
            throw new IllegalStateException("Contador atingiu limite m√°ximo");
        }
    }

    public void resetarContador() {
        if (statusValidado) {
            contadorInterno = 0;
        } else {
            throw new IllegalStateException("N√£o √© poss√≠vel resetar antes da valida√ß√£o");
        }
    }

    /**
     * üîç M√âTODO DE VALIDA√á√ÉO GERAL
     */
    public boolean isEstadoValido() {
        return statusValidado &&
                dadoSensivel != null &&
                !dadoSensivel.trim().isEmpty() &&
                contadorInterno >= 0 &&
                contadorInterno <= limiteOperacao;
    }

    // ========================================
    // üìã M√âTODOS ESSENCIAIS (toString, equals, hashCode)
    // ========================================

    @Override
    public String toString() {
        return String.format("EncapsulationSyntax{id='%s', validado=%s, contador=%d}",
                id.substring(0, 8) + "...", statusValidado, contadorInterno);
    }

    // ========================================
    // üß™ DEMONSTRA√á√ÉO PR√ÅTICA
    // ========================================

    public static void main(String[] args) {
        System.out.println("üìã DEMONSTRA√á√ÉO: SINTAXE DO ENCAPSULAMENTO");
        System.out.println("=" + "=".repeat(50));

        try {
            // ‚úÖ CRIA√á√ÉO V√ÅLIDA
            EncapsulationSyntax exemplo = new EncapsulationSyntax("DADOS_TESTE", 42);
            System.out.println("‚úÖ Objeto criado: " + exemplo);

            // ‚úÖ USANDO GETTERS
            System.out.println("üìñ Dado sens√≠vel: " + exemplo.getDadoSensivel());
            System.out.println("üìñ Status validado: " + exemplo.isStatusValidado());
            System.out.println("üìñ Resumo: " + exemplo.getResumoStatus());

            // ‚úÖ USANDO SETTERS COM VALIDA√á√ÉO
            exemplo.setDadoSensivel("NOVOS_DADOS_123");
            System.out.println("‚úÖ Dado alterado com sucesso!");

            // ‚úÖ M√âTODOS DE NEG√ìCIO
            exemplo.incrementarContador();
            System.out.println("‚úÖ Contador incrementado: " + exemplo.getResumoStatus());

            // ‚úÖ VALIDA√á√ÉO DE SENHA
            exemplo.setSenha("minhasenhasecreta");
            System.out.println("‚úÖ Senha verificada: " + exemplo.verificarSenha("minhasenhasecreta"));
            System.out.println("‚ùå Senha incorreta: " + exemplo.verificarSenha("senhaerrada"));

        } catch (Exception e) {
            System.err.println("‚ùå Erro: " + e.getMessage());
        }

        // ‚ùå DEMONSTRANDO VALIDA√á√ïES
        System.out.println("\nüõ°Ô∏è TESTANDO VALIDA√á√ïES:");
        try {
            new EncapsulationSyntax(null, 10);  // Deve dar erro
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Valida√ß√£o funcionou: " + e.getMessage());
        }

        try {
            new EncapsulationSyntax("dados", -5);  // Deve dar erro
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Valida√ß√£o funcionou: " + e.getMessage());
        }
    }
}

/*
 * üìö RESUMO DOS PADR√ïES:
 *
 * üî¥ PRIVATE: Use para TUDO que √© interno da classe
 * üü° PROTECTED: Use apenas para heran√ßa planejada
 * üü¢ PUBLIC: Use apenas para interface p√∫blica e constantes
 * üì¶ PACKAGE: Use para colabora√ß√£o entre classes do mesmo m√≥dulo
 *
 * üìñ GETTERS: get + Nome (ou is + Nome para boolean)
 * ‚úèÔ∏è SETTERS: set + Nome (com valida√ß√µes SEMPRE!)
 *
 * üõ°Ô∏è VALIDA√á√ÉO: No construtor E nos setters
 * üîí READ-ONLY: S√≥ getter, sem setter
 * üîê WRITE-ONLY: S√≥ setter (para dados sens√≠veis)
 *
 * üéØ REGRA DE OURO: Se duvidar, deixe PRIVATE e crie m√©todos controlados!
 */
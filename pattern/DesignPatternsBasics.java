package pattern;

/**
 * üèóÔ∏è DESIGN PATTERNS BASICS - PADR√ïES DE PROJETO
 *
 * Design Patterns = "Jeitos testados de resolver problemas comuns"
 *
 * SINGLETON: Garantir que s√≥ existe UMA inst√¢ncia de uma classe
 */
public class DesignPatternsBasics {

    public static void main(String[] args) {
        System.out.println("=== SINGLETON PATTERN ===\n");

        // ‚ùå Isso N√ÉO funciona - construtor √© privado
        // Logger logger = new Logger(); // ERRO!

        // ‚úÖ Jeito correto - pedir para a pr√≥pria classe
        Logger logger1 = Logger.getInstance();
        Logger logger2 = Logger.getInstance();

        // Vamos ver se s√£o o MESMO objeto
        System.out.println("logger1 == logger2? " + (logger1 == logger2));
        System.out.println("HashCode logger1: " + logger1.hashCode());
        System.out.println("HashCode logger2: " + logger2.hashCode());

        // Usando o logger
        logger1.log("Sistema iniciado");
        logger2.log("Usu√°rio logou");

        // Mesmo sendo "dois" loggers, as mensagens v√£o pro mesmo lugar!
        System.out.println("\nTodos os logs:");
        logger1.mostrarLogs();

        System.out.println("\n" + "=".repeat(50));
        System.out.println("=== FACTORY PATTERN ===\n");

        demonstrarFactoryPattern();
    }

    // ========== SINGLETON B√ÅSICO ==========

    /**
     * üìù LOGGER SINGLETON
     *
     * PROBLEMA: Queremos um logger √∫nico em toda aplica√ß√£o
     * SOLU√á√ÉO: S√≥ permitir UMA inst√¢ncia dessa classe
     */
    static class Logger {
        // üîí A inst√¢ncia √∫nica fica guardada aqui
        private static Logger instancia = null;

        // üìã Para guardar as mensagens de log
        private StringBuilder logs;

        // üö´ CONSTRUTOR PRIVADO - ningu√©m pode fazer "new Logger()"
        private Logger() {
            this.logs = new StringBuilder();
            System.out.println("üî® Logger criado! (s√≥ acontece uma vez)");
        }

        // üö™ PORTEIRO - √∫nico jeito de pegar o Logger
        public static Logger getInstance() {
            if (instancia == null) {
                instancia = new Logger();
            }
            return instancia;
        }

        // üìÑ M√©todo para adicionar log
        public void log(String mensagem) {
            String logEntry = "[LOG] " + mensagem;
            logs.append(logEntry).append("\n");
            System.out.println(logEntry);
        }

        // üëÄ M√©todo para ver todos os logs
        public void mostrarLogs() {
            System.out.println("=== HIST√ìRICO DE LOGS ===");
            System.out.println(logs.toString());
        }
    }

    // ========== FACTORY PATTERN DEMO ==========

    private static void demonstrarFactoryPattern() {
        System.out.println("--- PROBLEMA SEM FACTORY ---");

        // Simulando dados que v√™m do banco/usu√°rio
        String[] tiposDoSistema = {"pdf", "excel", "txt"};

        // ‚ùå Jeito ruim - if/else espalhado por todo c√≥digo
        for (String tipo : tiposDoSistema) {
            System.out.println("\nCriando relat√≥rio: " + tipo);

            // Imagina ter isso em v√°rios lugares do c√≥digo...
            if (tipo.equals("pdf")) {
                RelatoriopDF relatorio = new RelatoriopDF();
                relatorio.gerar();
            } else if (tipo.equals("excel")) {
                RelatorioExcel relatorio = new RelatorioExcel();
                relatorio.gerar();
            } else if (tipo.equals("txt")) {
                RelatorioTXT relatorio = new RelatorioTXT();
                relatorio.gerar();
            }
        }

        System.out.println("\n--- SOLU√á√ÉO COM FACTORY ---");

        // ‚úÖ Jeito profissional - Factory decide qual criar
        for (String tipo : tiposDoSistema) {
            System.out.println("\nCriando relat√≥rio: " + tipo);

            // Uma linha s√≥! Factory decide qual instanciar
            Relatorio relatorio = RelatorioFactory.criarRelatorio(tipo);
            relatorio.gerar();
        }

        // Testando tipo inv√°lido
        System.out.println("\n--- TESTANDO TIPO INV√ÅLIDO ---");
        try {
            Relatorio relatorio = RelatorioFactory.criarRelatorio("powerpoint");
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erro capturado: " + e.getMessage());
        }
    }

    // ========== FACTORY PATTERN IMPLEMENTATION ==========

    /**
     * üìã INTERFACE COMUM - Todos os relat√≥rios implementam
     */
    interface Relatorio {
        void gerar();
        String getTipo();
    }

    /**
     * üìÑ RELAT√ìRIO PDF - Implementa√ß√£o espec√≠fica
     */
    static class RelatoriopDF implements Relatorio {
        @Override
        public void gerar() {
            System.out.println("üìÑ Gerando relat√≥rio PDF...");
            System.out.println("   - Configurando layout");
            System.out.println("   - Adicionando gr√°ficos");
            System.out.println("   - Exportando arquivo.pdf");
        }

        @Override
        public String getTipo() {
            return "PDF";
        }
    }

    /**
     * üìä RELAT√ìRIO EXCEL - Implementa√ß√£o espec√≠fica
     */
    static class RelatorioExcel implements Relatorio {
        @Override
        public void gerar() {
            System.out.println("üìä Gerando relat√≥rio Excel...");
            System.out.println("   - Criando planilha");
            System.out.println("   - Adicionando dados");
            System.out.println("   - Salvando arquivo.xlsx");
        }

        @Override
        public String getTipo() {
            return "Excel";
        }
    }

    /**
     * üìù RELAT√ìRIO TXT - Implementa√ß√£o espec√≠fica
     */
    static class RelatorioTXT implements Relatorio {
        @Override
        public void gerar() {
            System.out.println("üìù Gerando relat√≥rio TXT...");
            System.out.println("   - Formatando texto");
            System.out.println("   - Salvando arquivo.txt");
        }

        @Override
        public String getTipo() {
            return "TXT";
        }
    }

    /**
     * üè≠ FACTORY - Decide qual relat√≥rio criar
     *
     * VANTAGENS:
     * ‚úÖ Centralizou a l√≥gica de cria√ß√£o
     * ‚úÖ F√°cil adicionar novos tipos
     * ‚úÖ Eliminou if/else espalhados
     */
    static class RelatorioFactory {
        public static Relatorio criarRelatorio(String tipo) {
            switch (tipo.toLowerCase()) {
                case "pdf":
                    return new RelatoriopDF();
                case "excel":
                case "xls":
                case "xlsx":
                    return new RelatorioExcel();
                case "txt":
                case "text":
                    return new RelatorioTXT();
                default:
                    throw new IllegalArgumentException("Tipo de relat√≥rio n√£o suportado: " + tipo);
            }
        }
    }
}
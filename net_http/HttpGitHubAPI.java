package net_http;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

public class HttpGitHubAPI {
    public static void main(String[] args) {

        // ========== SETUP DO CLIENTE ==========
        System.out.println("=== GITHUB API - CONSUMINDO DADOS REAIS ===");

        HttpClient client = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();

        // ---------------- BUSCAR USU√ÅRIO ----------------
        System.out.println("\n--- BUSCANDO USU√ÅRIO DO GITHUB ---");

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.github.com/users/octocat"))
                    .header("User-Agent", "JavaApp/1.0")
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Status: " + response.statusCode());

            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Usu√°rio encontrado!");
                System.out.println("Dados do usu√°rio:");
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro: " + response.statusCode());
            }

        } catch (IOException | InterruptedException e) {
            System.err.println("Erro na requisi√ß√£o: " + e.getMessage());
        }

        // ---------------- BUSCAR REPOSIT√ìRIOS DE UM USU√ÅRIO ----------------
        System.out.println("\n--- REPOSIT√ìRIOS DO USU√ÅRIO ---");

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.github.com/users/octocat/repos"))
                    .header("User-Agent", "JavaApp/1.0")
                    .header("Accept", "application/json")
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Status: " + response.statusCode());
            System.out.println("Reposit√≥rios:");
            System.out.println(response.body());

        } catch (IOException | InterruptedException e) {
            System.err.println("Erro ao buscar reposit√≥rios: " + e.getMessage());
        }

        // ---------------- TRATANDO ERRO 404 ----------------
        System.out.println("\n--- TESTANDO USU√ÅRIO INEXISTENTE ---");

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.github.com/users/usuarioquenoexiste999"))
                    .header("User-Agent", "JavaApp/1.0")
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Status: " + response.statusCode());

            if (response.statusCode() == 404) {
                System.out.println("‚ùå Usu√°rio n√£o encontrado");
                System.out.println("Mensagem de erro:");
                System.out.println(response.body());
            }

        } catch (IOException | InterruptedException e) {
            System.err.println("Erro na requisi√ß√£o: " + e.getMessage());
        }

        // ---------------- RATE LIMITING INFO ----------------
        System.out.println("\n--- VERIFICANDO RATE LIMIT ---");

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.github.com/rate_limit"))
                    .header("User-Agent", "JavaApp/1.0")
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Status: " + response.statusCode());
            System.out.println("Informa√ß√µes de rate limit:");
            System.out.println(response.body());

            // Headers importantes do rate limit
            response.headers().firstValue("X-RateLimit-Limit").ifPresent(
                    limit -> System.out.println("Limite: " + limit + " requests/hora"));

            response.headers().firstValue("X-RateLimit-Remaining").ifPresent(
                    remaining -> System.out.println("Restante: " + remaining + " requests"));

        } catch (IOException | InterruptedException e) {
            System.err.println("Erro ao verificar rate limit: " + e.getMessage());
        }

        // ---------------- BUSCAR INFORMA√á√ïES DE UM REPOSIT√ìRIO ----------------
        System.out.println("\n--- INFORMA√á√ïES DE REPOSIT√ìRIO ESPEC√çFICO ---");

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.github.com/repos/octocat/Hello-World"))
                    .header("User-Agent", "JavaApp/1.0")
                    .header("Accept", "application/json")
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Status: " + response.statusCode());

            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Reposit√≥rio encontrado!");
                System.out.println("Informa√ß√µes do reposit√≥rio:");
                System.out.println(response.body());
            } else if (response.statusCode() == 404) {
                System.out.println("‚ùå Reposit√≥rio n√£o encontrado");
            }

        } catch (IOException | InterruptedException e) {
            System.err.println("Erro ao buscar reposit√≥rio: " + e.getMessage());
        }

        // ---------------- EXEMPLO DE M√öLTIPLAS REQUISI√á√ïES ----------------
        System.out.println("\n--- EXEMPLO: COMPARANDO DOIS USU√ÅRIOS ---");

        String[] usuarios = {"octocat", "defunkt"};  // Fundadores do GitHub

        for (String usuario : usuarios) {
            try {
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("https://api.github.com/users/" + usuario))
                        .header("User-Agent", "JavaApp/1.0")
                        .GET()
                        .build();

                HttpResponse<String> response = client.send(request,
                        HttpResponse.BodyHandlers.ofString());

                System.out.println("\n=== Usu√°rio: " + usuario + " ===");
                System.out.println("Status: " + response.statusCode());

                if (response.statusCode() == 200) {
                    // Em uma aplica√ß√£o real, voc√™ faria parse do JSON aqui
                    // Para simplificar, s√≥ mostramos que funcionou
                    System.out.println("‚úÖ Dados recebidos para " + usuario);
                    System.out.println("Tamanho da resposta: " + response.body().length() + " caracteres");
                } else {
                    System.out.println("‚ùå Erro para usu√°rio " + usuario);
                }

                // Pausa pequena para n√£o sobrecarregar a API
                Thread.sleep(500);

            } catch (IOException | InterruptedException e) {
                System.err.println("Erro ao buscar " + usuario + ": " + e.getMessage());
            }
        }

        System.out.println("\n‚úÖ Consumo da GitHub API finalizado!");
        System.out.println("üí° Pr√≥ximos passos: Parse JSON, autentica√ß√£o com token, async requests");
    }
}